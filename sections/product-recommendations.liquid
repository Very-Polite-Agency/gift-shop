{%- liquid

  assign section_name = 'product-recommendations'
  assign section_classes = section_name | append: ' section-' | append: section.id | append: '-padding'
  assign section_id = section_name | append: '--' | append: section.id

  assign aos_id = section_id | append: '--aos'
  assign aos_delay = 250
  assign aos_delay_increment = 250

  assign background_colour = section.settings.background | default: 'white'
  assign container = section.settings.container | default: 'container'
  assign heading = section.settings.heading | append: ''
  assign product_limit = section.settings.product_limit | default: 3
  assign subheading = section.settings.subheading | append: ''

-%}


{%- style -%}

  {% if background_colour != blank %}
    #shopify-section-{{ section.id }} {
      background: rgba(var(--theme-colour-{{ background_colour }}), 1);
      {% case background_colour %}
        {% when 'orange' %}
          color: rgba(var(--theme-colour-black), 1);
        {% when 'white' %}
          color: rgba(var(--theme-colour-black), 1);
        {% else %}
          color: rgba(var(--theme-colour-white), 1);
      {% endcase %}
    }
  {% endif %}

  .section-{{ section.id }}-padding {
    padding-top: calc({{ section.settings.padding_top }}px * 0.75);
    padding-bottom: calc({{ section.settings.padding_bottom }}px  * 0.75);
  }

  @media screen and (min-width: 992px) {
    .section-{{ section.id }}-padding {
      padding-top: {{ section.settings.padding_top }}px;
      padding-bottom: {{ section.settings.padding_bottom }}px;
    }
  }

{%- endstyle -%}

<div class="{{ section_classes }}" id="{{ section_id }}">
  {% render 'bs-container', state: 'open', container: container %}

    <div class="{{ section_name }}__layout">

      {% if heading != blank or subheading != blank %}
        <div class="{{ section_name }}__content">
          {% if heading != blank %}<strong class="{{ section_name }}__heading heading--1">{{ heading }}</strong>{% endif %}
          {% if subheading != blank %}<strong class="{{ section_name }}__subheading heading--2">{{ subheading }}</strong>{% endif %}
        </div>
      {% endif %}

      <div class="{{ section_name }}__main" id="{{ section_name }}__main" data-product-limit="{{ product_limit }}">
        <!-- Inject Ajax Recommended Products Here -->
      </div>

    </div>

  {% render 'bs-container', state: 'closed', container: container %}
</div>

<script>

  let sectionName = {{ section_name | json }};
  let html, is_glider;
  let productID = {{ product.id | json }};
  let limit = {{ product_limit | json }};
  let recommendedGlider = {
    interval: null,
    id: {{ glider_id | json }},
    glider: {}
  };

  document.addEventListener('DOMContentLoaded', function() {
    recommendedProducts();
  }, false);

  function recommendedProducts() {
    fetch(window.Shopify.routes.root + `recommendations/products.json?product_id=${productID}&limit=${limit}`)
      .then(response => response.json())
      .then(({ products }) => {
        if ( products.length > 0 ) {
          document.getElementById(`${sectionName}__main`).innerHTML = renderProductsMarkup(products);
        }
      }
    );
  };

  function renderProductsMarkup( products = [] ) {
    return `
      ${products.map(product =>
        `<div class="${sectionName}__item">
          ${renderProductCardMarkup(product)}
        </div>`
      ).join('')}
    `;
  };

  function renderProductCardMarkup( product = {} ) {

    let featuredImage = {
      small: Theme.imgURLFilter(product.featured_image, 'icon'),
      large: Theme.imgURLFilter(product.featured_image, 'large')
    };
    let handle = product.handle;
    let title = product.title;

    return `
      <article class="card-product product" data-style="{{ sectionName }}">
        <div class="card-product__layout">

          <div class="card-product__image">
            <a class="card-product__image-link link" href="{{ url }}" title="{{ title }}" target="_self">
              {% render 'lazyload-image', classes: 'card-product__image-01', image: images[0] %}
              {% render 'lazyload-image', classes: 'card-product__image-02', image: images[1] %}
            </a>
          </div>

          <div class="card-product__content">
            <strong class="card-product__title">
              <a class="card-product__title-link link" href="{{ url }}" title="{{ title }}" target="_self">{{ title }}</a>
            </strong>
          </div>

        </div>
      </article>




      <article class="card-product card-product--${sectionName} product">
        <div class="card-product__featured-image product__featured-image">
          <a class="card-product__featured-image-link link" href="/products/${handle}" title="${title}" target="_self">
            <img class="lazyload-item lazyload-item--image lazypreload lazyload-item--inline inline lazyautosizes lazyload" src="${featuredImage.small}" data-src="${featuredImage.large}" alt="${title}" />
          </a>
        </div>
        <div class="card-product__info">
          <strong class="card-product__title caption--2">${title}</strong>
          <div class="card-product__price caption--2">${renderProductPrice(product)}</div>
        </div>
      </article>
    `;

  };

  function renderProductPrice( product = {} ) {

    let price = product.price || 0;
    let price_compare = product.compare_at_price || 0;
    let currency_code = Theme.currency.iso_code;

    return `
      <div class="price caption caption--2">
        ${(function () {
		      if ( price_compare ) {
			      return `
              <span class="price__amount">${ price/100 }<span class="price__currency-code">${ currency_code }</span></span>
              <span class="price__amount compare-at-price">${ price_compare/100 }<span class="price__currency-code">${ currency_code }</span></span>
            `;
		      } else {
            return `
              <span class="price__amount">${ price/100 }<span class="price__currency-code">${ currency_code }</span></span>
            `;
          }

	      })()}
      </div>
    `;

  };

  function initializeGlider() {

    recommendedGlider.glider = new Glide( `#${recommendedGlider.id}`, {
      animationDuration: 750,
      animationTimingFunc: 'ease-in-out',
      autoplay: 3750,
      breakpoints: {
        // up to 9999
        9999: {
          peek: { before: 0, after: 175 },
          perView: 3
        },
        // up to 1400
        1399: {
          peek: { before: 0, after: 175 },
          perView: 2
        },
        // up to 1200
        1199: {
          peek: { before: 0, after: 175 },
          perView: 2
        },
        // up to 992
        991: {
          peek: { before: 0, after: 100 },
          perView: 2
        },
        // up to 768
        767: {
          peek: { before: 0, after: 150 },
          perView: 1
        },
        // up to 576
        575: {
          peek: { before: 0, after: 100 },
          perView: 1
        }
      },
      gap: 28,
      peek: 0,
      perView: 1,
      type: 'carousel',
      rewind: true,
      throttle: 50,
    });

    recommendedGlider.glider.on( 'mount.after', function(event) {
      setTimeout( function() {
        recommendedGlider.glider.update();
      }, 250 );
    });

    ( document.querySelectorAll(`[data-target="#${recommendedGlider.id}"][data-trigger-next]`) || [] ).forEach( button => {
      button.addEventListener('click', function () {
        recommendedGlider.glider.go('>');
      });
    });

    ( document.querySelectorAll(`[data-target="#${recommendedGlider.id}"][data-trigger-prev]`) || [] ).forEach( button => {
      button.addEventListener('click', function () {
        recommendedGlider.glider.go('<');
      });
    });

    recommendedGlider.glider.mount();

  };

  function initializeGliderWithInterval() {

    recommendedGlider.interval = setInterval( function() {

      if ( document.getElementById(recommendedGlider.id) ) {

        clearInterval(recommendedGlider.interval);

        recommendedGlider.glider = new Glide( `#${recommendedGlider.id}`, {
          animationTimingFunc: 'ease-in-out',
          animationDuration: 750,
          autoplay: 3750,
          breakpoints: {
            // up to 9999
            9999: {
              peek: { before: 0, after: 175 },
              perView: 3
            },
            // up to 1400
            1399: {
              peek: { before: 0, after: 175 },
              perView: 2
            },
            // up to 1200
            1199: {
              peek: { before: 0, after: 175 },
              perView: 2
            },
            // up to 992
            991: {
              peek: { before: 0, after: 100 },
              perView: 2
            },
            // up to 768
            767: {
              peek: { before: 0, after: 150 },
              perView: 1
            },
            // up to 576
            575: {
              peek: { before: 100, after: 100 },
              perView: 1
            }
          },
          gap: 32,
          hoverpause: true,
          rewind: true,
          throttle: 50,
          type: 'carousel'
        });

        recommendedGlider.glider.on( 'mount.after', function(event) {
          setTimeout( function() {
            recommendedGlider.glider.update();
          }, 250 );
        });

        ( document.querySelectorAll(`[data-target="#${recommendedGlider.id}"].next`) || [] ).forEach( button => {
          button.addEventListener('click', function () {
            recommendedGlider.glider.go('>');
          });
        });

        ( document.querySelectorAll(`[data-target="#${recommendedGlider.id}"].prev`) || [] ).forEach( button => {
          button.addEventListener('click', function () {
            recommendedGlider.glider.go('<');
          });
        });

        recommendedGlider.glider.mount();

      }

    }, 100);

    console.log('initializeGliderWithInterval :: Finished');

  };

</script>

{% schema %}
  {
    "name": "Product Recommendations",
    "tag": "section",
    "class": "section section--product-recommendations",
    "settings": [
      {
        "content": "Content",
        "type": "header"
      },
      {
        "label": "Heading",
        "type": "text",
        "id": "heading"
      },
      {
        "label": "Subheading",
        "type": "text",
        "id": "subheading"
      },
      {
        "label": "Max number of recommended products",
        "type": "range",
        "min": 1,
        "max": 4,
        "step": 1,
        "default": 3,
        "id": "product_limit"
      },
      {
			  "content": "Layout",
			  "type": "header"
		  },
		  {
			  "label": "Background",
			  "type": "select",
			  "options": [{
					  "label": "Black",
					  "value": "black"
				  },
				  {
					  "label": "White",
					  "value": "white"
				  }
			  ],
			  "default": "white",
			  "id": "background"
		  },
		  {
			  "label": "Container",
			  "type": "select",
			  "options": [{
					  "label": "Static",
					  "value": "container"
				  },
				  {
					  "label": "Fluid",
					  "value": "container-fluid"
				  },
				  {
					  "label": "Full Width",
					  "value": "full-width"
				  }
			  ],
			  "default": "container",
			  "id": "container"
		  },
      {
			  "content": "Padding",
			  "type": "header"
		  },
		  {
			  "label": "Top Padding",
			  "type": "range",
			  "min": 0,
			  "max": 120,
			  "step": 4,
			  "unit": "px",
			  "default": 36,
        "id": "padding_top"
		  },
		  {
			  "label": "Bottom Padding",
			  "type": "range",
			  "min": 0,
			  "max": 120,
			  "step": 4,
			  "unit": "px",
			  "default": 36,
        "id": "padding_bottom"
		  }
    ],
    "presets": [
      {
        "name": "Product Recommendations"
      }
    ],
    "templates": [ "product" ]
  }
{% endschema %}
